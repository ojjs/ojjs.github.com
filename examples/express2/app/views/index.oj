// OJ natively supports Node's require syntax so anything you require will be brought down
// to the client for you. The only complication is modules (jQuery, oj, oj-twitter-button, etc)
// are _by far_ the biggest files so being able to share this code across multiple page
// requests can have huge peformance savings.
//
// OJ supports this separation natively but to do this you must make a
// module file in the /modules directory that will be precompiled to include all of the modules.
// In this case /modules/index.oj is being compiled into /public/modules/index.js
//
// The path for /modules or /public/modules are configurable when defining
// the oj.middleware in app.js

require('../modules')

module.exports = function(data){

  html(function(){

    head(function(){
      title(data.title);

      // Add a <script> tag to include shared modules defined in /module/index.js
      // This file is dynamically built, minified, and cached by oj.middleware defined in app.js
      script({src:'modules/index.js'});
    });

    body(function(){

      // (Lowercase) tag functions let you create any element
      h1(data.title)

      // The markdown plugin was included for your convenience!
      markdown('Object-oriented templating just got *real*.')

      // (Uppercase) Objects create and edit themselves through a returned instance
      var myList = BulletList(
        'Stuff',
        'Just',
        'Works'
      );

      // Edit list by moving the elements
      Button('Move Item', {click:function(){
        myList.move(0, myList.length)
      }})

      // Add items to the list
      Button('Add Item', {click:function(){
        myList.add('New Item!');
      }})

      // Add videos to the list
      Button('Add Video', {click:function(){
        myList.add(function(){
          YouTubeVideo('rfh4Mhp-a6U')
        })
      }})

    });
  });

  // In OJ, CSS can be defined in several ways, so do what you think makes the most
  // sense for your project!

  // The easiest way is to simply use .css files like you are use to. Just oj.link them
  // inside your oj.head function and the browser will load them normally.
  // This approach can also work with css templating engines like stylus or less.
  //
  // Another way to do it is to require('a/file.oj') that uses oj.css function
  // This lets you separate your css into separately included files
  // that can be included or excluded with code
  //
  // The last way is to just call the oj.css function at anytime:
  // This is great for testing and debugging

  css({
    h1:{
      color:'orange'
    }
  });

  // You may be wondering why does OJ even support CSS when most plugins use only html?
  // The reasoning is that being able to quickly change the look of a page is something
  // that is really powerful at the plugin level (think bootstrap)
  // The oj.css function makes this sort of OJ plugin possible.

}