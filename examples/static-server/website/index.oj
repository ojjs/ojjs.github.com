// index.oj: Create a simple static webpage using OJ

// By default server-side OJ embraces the Node approach of including
// files with `require` and `module.exports`, but OJ takes this
// a step further in that any files or modules you require
// will automatically be brought to the client for you
// unifying and minifying everything into .html files.

// This mechanism is still fully supported today, but in OJ v0.3 and greater
// modules have gotten even smarter with the --no-modules CLI option.
// Now it is possible to compile modules like jQuery, oj,
// Backbone, and underscore as separate external .js files.
// Any files included in the ./modules directory will be
// combined and minified like this, but it is up to you
// to "manually" <script> link the .js files in your .oj files.

// The first step for this separated module compiling is to
// create a file that requires all the modules, in this case ./modules/all.oj
// Require this module file you want just like so:
var modules = require('./modules/all.oj');

// Export your site returning an function that uses OJ:
module.exports = function(data){

  doctype(5);

  // Nesting is done with functions
  html(function(){

    head(function(){
      title('A Static Website Created with OJ');

      // The second step for separating modules from the html is to
      // <script> link to the newly built module file. The browser will cache
      // this file across requests making page loads much faster.
      script({src:'modules/all.js'});
    });

    body(function(){

      // (Lowercase) tag functions let you create any element
      h1('A Static Website Created with OJ');

      // The markdown plugin was included for your convenience!
      markdown('Object-oriented templating just got *real*.');

      // (Uppercase) Objects create and edit themselves through a returned instance
      var myList = BulletList(
        'Objects',
        'Just',
        'Work'
      );

      // Edit list by moving the elements
      Button('Move Item', {click:function(){
        myList.move(0, myList.length);
      }});

      // Add items to the list
      Button('Add Item', {click:function(){
        myList.add('New Item!');
      }});

      // Add videos to the list
      Button('Add Video', {click:function(){
        myList.add(function(){
          YouTubeVideo('rfh4Mhp-a6U')
        });
      }});

      // In OJ, CSS can be defined in several ways, so don't get caught up in specific examples,
      // and instead do what makes the most sense for your project! =).

      // The easiest way is to simply use .css files like you are use to. Just oj.link them
      // inside your oj.head function and the browser will load them normally.
      // This approach can also work with templating engines like stylus or less.

      // Another way to do it is to require('a/file.oj') that uses oj.css function to create css.
      // This lets you separate your css into separate files and functions, but still use JavaScript
      // variables and functions while making them.

      // The last way is to just call the oj.css function at anytime:

      css({
        h1:{
          color:'orange'
        },
        'li:nth-child(odd)':{
          color:'orange'
        }
      });

      // This is great for very small websites or when testing and debugging larger sites, but keep in mind
      // this last mechanism IS NOT the best organization for a larger sites!

      // The purpose behind the oj.css function is to bring css into a language with variables, loops, and functions.
      // With oj.css you could create a function that styles your entire site at once, or make a different function
      // that conditionally creates css depending on which browser you are targeting.

      // Just remember it is still a good idea to separate content (html) from presentation (css),
      // but now the separation is all in code. The best way to do this is just use separate
      // functions for creating html (templates and partials) and for creating css.
    });
  })

};
